diff --git a/app/javascript/mastodon/features/ui/components/columns_area.jsx b/app/javascript/mastodon/features/ui/components/columns_area.jsx
index 672f28fb7..fc98ca74e 100644
--- a/app/javascript/mastodon/features/ui/components/columns_area.jsx
+++ b/app/javascript/mastodon/features/ui/components/columns_area.jsx
@@ -6,6 +6,7 @@ import ImmutablePureComponent from 'react-immutable-pure-component';
 
 import { supportsPassiveEvents } from 'detect-passive-events';
 
+import { shouldShowNavPanel } from '../../../is_mobile';
 import { scrollRight } from '../../../scroll';
 import BundleContainer from '../containers/bundle_container';
 import {
@@ -54,6 +55,7 @@ export default class ColumnsArea extends ImmutablePureComponent {
     isModalOpen: PropTypes.bool.isRequired,
     singleColumn: PropTypes.bool,
     children: PropTypes.node,
+    isNavPanelOpen: PropTypes.bool.isRequired
   };
 
   // Corresponds to (max-width: $no-gap-breakpoint + 285px - 1px) in SCSS
@@ -138,9 +140,17 @@ export default class ColumnsArea extends ImmutablePureComponent {
   };
 
   render () {
-    const { columns, children, singleColumn, isModalOpen } = this.props;
+    const { columns, children, singleColumn, isModalOpen, isNavPanelOpen } = this.props;
     const { renderComposePanel } = this.state;
 
+    let mainPanelsAdditionalStyle;
+    const showNavPanel = shouldShowNavPanel() || isNavPanelOpen;
+    if (showNavPanel) {
+      mainPanelsAdditionalStyle = {};
+    } else {
+      mainPanelsAdditionalStyle = { width: '100%' };
+    }
+
     if (singleColumn) {
       return (
         <div className='columns-area__panels'>
@@ -150,16 +160,18 @@ export default class ColumnsArea extends ImmutablePureComponent {
             </div>
           </div>
 
-          <div className='columns-area__panels__main'>
+          <div className='columns-area__panels__main' style={mainPanelsAdditionalStyle}>
             <div className='tabs-bar__wrapper'><div id='tabs-bar__portal' /></div>
             <div className='columns-area columns-area--mobile'>{children}</div>
           </div>
 
-          <div className='columns-area__panels__pane columns-area__panels__pane--start columns-area__panels__pane--navigational'>
-            <div className='columns-area__panels__pane__inner'>
-              <NavigationPanel />
+          {showNavPanel &&
+            <div className='columns-area__panels__pane columns-area__panels__pane--start columns-area__panels__pane--navigational'>
+              <div className='columns-area__panels__pane__inner'>
+                <NavigationPanel />
+              </div>
             </div>
-          </div>
+          }
         </div>
       );
     }
diff --git a/app/javascript/mastodon/features/ui/components/header.jsx b/app/javascript/mastodon/features/ui/components/header.jsx
index 68484b59a..894f3f9fc 100644
--- a/app/javascript/mastodon/features/ui/components/header.jsx
+++ b/app/javascript/mastodon/features/ui/components/header.jsx
@@ -14,6 +14,8 @@ import { Icon } from 'mastodon/components/icon';
 import { WordmarkLogo, SymbolLogo } from 'mastodon/components/logo';
 import { registrationsOpen, me, sso_redirect } from 'mastodon/initial_state';
 
+import { shouldShowNavPanel } from '../../../is_mobile';
+
 const Account = connect(state => ({
   account: state.getIn(['accounts', me]),
 }))(({ account }) => (
@@ -22,6 +24,19 @@ const Account = connect(state => ({
   </Link>
 ));
 
+const navPanelToggle = (isNavPanelOpen, toggleNavPanel) => {
+  if (shouldShowNavPanel()) {
+    return null;
+  }
+  return (
+    <div style={{ width: '32px' }} onClick={toggleNavPanel} onKeyPress={toggleNavPanel} role='button' tabIndex={0}>
+      <div style={{ width: '50%', margin: '0 auto' }}>
+        {isNavPanelOpen ? <i className='fa fa-times' /> : <i className='fa fa-bars' />}
+      </div>
+    </div>
+  );
+};
+
 const messages = defineMessages({
   search: { id: 'navigation_bar.search', defaultMessage: 'Search' },
 });
@@ -51,6 +66,8 @@ class Header extends PureComponent {
     signupUrl: PropTypes.string.isRequired,
     dispatchServer: PropTypes.func,
     intl: PropTypes.object.isRequired,
+    isNavPanelOpen: PropTypes.bool.isRequired,
+    toggleNavPanel: PropTypes.func.isRequired,
   };
 
   componentDidMount () {
@@ -60,7 +77,7 @@ class Header extends PureComponent {
 
   render () {
     const { signedIn } = this.context.identity;
-    const { location, openClosedRegistrationsModal, signupUrl, intl } = this.props;
+    const { location, openClosedRegistrationsModal, signupUrl, intl, isNavPanelOpen, toggleNavPanel } = this.props;
 
     let content;
 
@@ -113,6 +130,7 @@ class Header extends PureComponent {
 
         <div className='ui__header__links'>
           {content}
+          {navPanelToggle(isNavPanelOpen, toggleNavPanel)}
         </div>
       </div>
     );
diff --git a/app/javascript/mastodon/features/ui/index.jsx b/app/javascript/mastodon/features/ui/index.jsx
index 55ccde72f..8348fd970 100644
--- a/app/javascript/mastodon/features/ui/index.jsx
+++ b/app/javascript/mastodon/features/ui/index.jsx
@@ -127,6 +127,7 @@ class SwitchingColumnsArea extends PureComponent {
     children: PropTypes.node,
     location: PropTypes.object,
     singleColumn: PropTypes.bool,
+    isNavPanelOpen: PropTypes.bool.isRequired,
   };
 
   UNSAFE_componentWillMount () {
@@ -157,7 +158,7 @@ class SwitchingColumnsArea extends PureComponent {
   };
 
   render () {
-    const { children, singleColumn } = this.props;
+    const { children, singleColumn, isNavPanelOpen } = this.props;
     const { signedIn } = this.context.identity;
     const pathName = this.props.location.pathname;
 
@@ -178,7 +179,7 @@ class SwitchingColumnsArea extends PureComponent {
     }
 
     return (
-      <ColumnsAreaContainer ref={this.setRef} singleColumn={singleColumn}>
+      <ColumnsAreaContainer ref={this.setRef} singleColumn={singleColumn} isNavPanelOpen={isNavPanelOpen}>
         <WrappedSwitch>
           {redirect}
 
@@ -267,6 +268,7 @@ class UI extends PureComponent {
 
   state = {
     draggingOver: false,
+    isNavPanelOpen: false,
   };
 
   handleBeforeUnload = e => {
@@ -283,6 +285,10 @@ class UI extends PureComponent {
     }
   };
 
+  handleToggleNavPanel = () => {
+    this.setState({ isNavPanelOpen: !this.state.isNavPanelOpen });
+  };
+
   handleWindowFocus = () => {
     this.props.dispatch(focusApp());
     this.props.dispatch(submitMarkers({ immediate: true }));
@@ -550,7 +556,7 @@ class UI extends PureComponent {
   };
 
   render () {
-    const { draggingOver } = this.state;
+    const { draggingOver, isNavPanelOpen } = this.state;
     const { children, isComposing, location, dropdownMenuIsOpen, layout } = this.props;
 
     const handlers = {
@@ -573,14 +579,15 @@ class UI extends PureComponent {
       goToBlocked: this.handleHotkeyGoToBlocked,
       goToMuted: this.handleHotkeyGoToMuted,
       goToRequests: this.handleHotkeyGoToRequests,
+      handleToggleNavPanel: this.handleToggleNavPanel
     };
 
     return (
       <HotKeys keyMap={keyMap} handlers={handlers} ref={this.setHotkeysRef} attach={window} focused>
         <div className={classNames('ui', { 'is-composing': isComposing })} ref={this.setRef} style={{ pointerEvents: dropdownMenuIsOpen ? 'none' : null }}>
-          <Header />
+          <Header isNavPanelOpen={isNavPanelOpen} toggleNavPanel={this.handleToggleNavPanel} />
 
-          <SwitchingColumnsArea location={location} singleColumn={layout === 'mobile' || layout === 'single-column'}>
+          <SwitchingColumnsArea location={location} singleColumn={layout === 'mobile' || layout === 'single-column'} isNavPanelOpen={isNavPanelOpen}>
             {children}
           </SwitchingColumnsArea>
 
diff --git a/app/javascript/mastodon/is_mobile.ts b/app/javascript/mastodon/is_mobile.ts
index 7f339e287..28efee329 100644
--- a/app/javascript/mastodon/is_mobile.ts
+++ b/app/javascript/mastodon/is_mobile.ts
@@ -32,3 +32,7 @@ const touchListener = () => {
 window.addEventListener('touchstart', touchListener, listenerOptions);
 
 export const isUserTouching = () => userTouching;
+
+export const shouldShowNavPanel = (): boolean => {
+  return layoutFromWindow() !== 'mobile';
+};
